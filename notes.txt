not listesi:

önemli linkler:

1- https://simpleisbetterthancomplex.com/tips/2018/02/10/django-tip-22-designing-better-models.html
2- https://simpleisbetterthancomplex.com/tips/2016/07/25/django-tip-8-blank-or-null.html
3- https://betterprogramming.pub/clean-code-principles-in-django-b0563a4e12f5
4- https://betterprogramming.pub/refactors-you-need-to-know-to-for-your-django-project-8a56b0dee34f

5- https://docs.djangoproject.com/en/5.1/topics/auth/customizing/#referencing-the-user-model  //for referencing the user


bildiğimden emin olmam gerekenler : 

How to create a Django project
Django App
Django Model
Django Migration
View
Template
URL
Django Admin
Django Form
Bootstrap
Authentication
Django ORM
Class Based Views (never use function based system in project)
Generic Class-Based View (Learn it but do not use them in your project. Do not use CreateView, UpdateView, ListView  etc.)
Paginator
Decorators & Mixins
Deployment

             related_name tersine işlemler için var. Nasıl yani?

class Ogrenci(models.Model):
    ad = models.CharField(max_length=100)

class Ders(models.Model):
    baslik = models.CharField(max_length=200)
    ogrenciler = models.ManyToManyField(Ogrenci, related_name='kayitli_dersler')

ogrenci = Ogrenci.objects.get(id=1)
dersler = ogrenci.kayitli_dersler.all()

             bunun sonucunda 1 numaralı öğrenci objesinin kayıtlı olduğu bütün derslere erişebiliyoruz




Null: It is database-related. Defines if a given database column will accept null values or not.
Blank: It is validation-related. It will be used during forms validation, when calling form.is_valid()





hedef proje "4.0"  ilerlemesi:
modellenenler = courses, semesters, rooms,
foreignkey = a blog linked to its user



DJANGO REQUEST NASIL PROCESSLIYOR:

https://docs.djangoproject.com/en/5.1/topics/http/urls/



Hatırlamalık bazı komutlar:


python manage.py magemigrations APP_NAME (olmasa da olur appname)
python manage.py sqlmigrate APP_NAME MIGRATION_NUMBER
python manage.py migrate